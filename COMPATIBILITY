# Backwards-incompatible changes from Fabric 0.1.* and earlier

In no particular order:

* Fabric no longer makes any attempt to be Python 2.4 compatible. It's painful,
but when rewritten it was simply too tempting to make use of the various tools
2.5 gives a developer: the `with` statement, the `all` and `any` builtin
methods, the `partition` string method, and many more.
    * Specifically, we're settling on a policy of supporting the most recent 2
    stable releases of Python 2.x, and that means 2.5 and 2.6 at the present
    time. Python 2.5 came out in 09/2006, which is pretty old at this point :)
    Furthermore, Debian stable -- always a good milestone for "old stuff" --
    recently came out with 2.5 on board.
    * If any users absolutely must have 2.4 support, we would welcome a
    semi-official standalone set of patches (or a Github fork) providing it,
    and might link to such code to make it easy to find. We would not,
    however, be able to actually support that version of the code.
* Fabric config file location used to be ~/.fabric; in the interests of honoring
Unix filename conventions it's now ~/.fabricrc
* The old Configuration class that 'env'/'ENV' was an instance of, has been
cleaned up, and its 'getAny()' method has been renamed to 'first()'.
* Additionally, that class apparently performed string interpolation -- with
itself as the mapping -- when setting values via e.g. 'env[key] = value'. This
didn't make much sense to me, so I've stripped it out for now. Simpler is
better.
* Internal variables such as 'fab_host' and 'fab_version' have been renamed to
simply 'host' and 'version' and so forth. This looks cleaner/more natural and
is less typing, and as long as we document them users should know not to
override them (just like regular Python and keywords/builtins, for example).
* Fabric version header is no longer printed every time the program runs; now
use the standard --version/-V options to print version and exit.
    * May add this behavior back in when Fab runs in some sort of verbose mode.
* The old internal 'about' command has been removed; other Unix programs don't
typically offer this. Users can always see the license and warranty info in
their respective text files distributed with the software.
* The old internal 'help' command is now the typical Unix options -h/--help.
    * Furthermore, there is no longer a listing of Fabric's programming API
    available through the command line -- those topics impact fabfile authors,
    not fab users (even though the former is a subset of the latter) and should
    stay in the documentation only.
* `prompt()` has been updated to behave more obviously, as I felt its previous
behavior was a bit confusing in a few ways:
    * It will now overwrite any previous value in the environment dict, but
    will print a warning to the user if it does so.
    * Additionally, validation used to fire even if the variable already
    existed in the env dict, and would error if the old value did not fit the
    new validation -- and would discard the new input regardless! None of this
    made any sense to me and I felt it could be very confusing to users, so it
    has been removed.
    * Also additionally, (and this appeared to be undocumented?) the `default`
    argument could take a callable as well as a string, and would simply set
    the default message to the return value if a callable was given. This also
    doesn't make sense to me (the user can just do `prompt(blah, msg,
    default=my_callable()` after all) so it has been nixed.
* "Broad" mode is no more; all commands now run all the way through, once per
host (which is what used to be called "deep" mode). Reasoning:
    * Broad mode offered no end-user functionality over deep mode; I can't
    think of any realistic use case where one would need each operation to
    apply to all hosts before moving on to the next operation.
    * Comparatively, deep mode allows for actual logic to be performed in
    fabfiles, something broad mode prevented by its very nature.
    * Implementing broad mode alongside deep mode would require a significantly
    larger amount of code and make the internals much more byzantine and
    bug-prone.


# Things which are more bug-fixes than compatibility issues
## but which still represent changes to actual behavior

* It looks like the regex behavior of the `validate` argument of `prompt()` was
never actually implemented. It now works as advertised.


# New features not present in previous versions
* Unix-style options/flags now replace all previous "internal" commands such as
`list` or `help`, as well as becoming the correct/only way to set some options
which were implemented as global env vars such as `fab_quiet` or `fab_hosts`.


<!-- vim:set filetype=mkd : -->
